{
  "version": 4,
  "terraform_version": "1.10.3",
  "serial": 308,
  "lineage": "cea22d52-e6ad-a720-09b8-ab21eadc0d14",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "cloudinit_config",
      "name": "k8s_kind_with_istio",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "boundary": "MIMEBOUNDARY",
            "gzip": false,
            "id": "895659404",
            "part": [
              {
                "content": "#!/bin/env bash\n\nARCH=\"amd64\"\nif [ \"$(uname -m)\" = \"aarch64\" ]; then ARCH=arm64; fi\n\n### general dependencies ###\nsudo apt-get update\nsudo apt-get -qq install -y zip net-tools\n\n### install kubectl ###\ncurl https://dl.k8s.io/release/v1.26.3/bin/linux/$ARCH/kubectl -Lo ./kubectl\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin/kubectl\n\n### install kind ###\ncurl https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-$ARCH -Lo ./kind\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n\n### install helm ###\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh  --version v3.12.0\nrm get_helm.sh\n\n### install docker ###\nsudo apt -qq install -y ca-certificates curl gnupg\n\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\necho \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release \u0026\u0026 echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\nsudo apt -qq update\nsudo apt -qq install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin\n\ncat \u003c\u003cEOF | sudo tee /etc/docker/daemon.json \u003e /dev/null\n{\n  \"ipv6\": true,\n  \"fixed-cidr-v6\": \"2001:db8:1::/64\"\n}\nEOF\n\nsudo groupadd docker\nsudo usermod -aG docker ubuntu\n\nsudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n\nsudo mkdir -p /usr/local/lib/docker/cli-plugins\nsudo curl \"https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-$(uname -s)-$(uname -m)\" -Lo /usr/local/lib/docker/cli-plugins/docker-compose\nsudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n\nsudo systemctl restart docker.service\n\n### disable rpcbind/sunrpc (port 111) ###\nsudo systemctl stop rpcbind.service\nsudo systemctl stop rpcbind.socket\nsudo systemctl disable rpcbind.service\n\n### create node data folder ###\nNODE_DATA_PATH=/node-data\nsudo mkdir $NODE_DATA_PATH\nsudo chown -R root:root $NODE_DATA_PATH\nsudo chmod -R 777 $NODE_DATA_PATH\n\n### create cluster ###\nCLUSTER_NAME=kind\nDATA_PATH=$NODE_DATA_PATH/kind-data\nPV_PATH=$NODE_DATA_PATH/kind-pv\n\nexport KUBECONFIG=/.kube/config\n\ncat \u003c\u003cEOF | kind create cluster --wait 5m --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nname: $CLUSTER_NAME\nnodes:\n- role: control-plane\n  image: kindest/node:v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72\n  kubeadmConfigPatches:\n  - |\n    kind: KubeletConfiguration\n    apiVersion: kubelet.config.k8s.io/v1beta1\n    imageGCHighThresholdPercent: 70\n    imageGCLowThresholdPercent: 0\n    imageMinimumGCAge: 30m\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    #listenAddress: \"0.0.0.0\"\n  - containerPort: 443\n    hostPort: 443\n    #listenAddress: \"0.0.0.0\"\n  extraMounts:\n  - hostPath: $DATA_PATH\n    containerPath: /mnt\n  - hostPath: $PV_PATH\n    containerPath: /var/local-path-provisioner\nnetworking:\n  ipFamily: dual # ipv4 ipv6 dual\n  apiServerPort: 6443\n  apiServerAddress: \"0.0.0.0\"\nEOF\n\nsudo chown -R root:root /.kube\nsudo chmod -R 777 /.kube\n\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | sudo tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | sudo tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### install istio ###\nexport ISTIO_VERSION=1.21.2\ncurl -L https://istio.io/downloadIstio | sh -\nmv ./istio-$ISTIO_VERSION ./istio\nsudo cp ./istio/bin/* /usr/local/bin\n",
                "content_type": "text/x-shellscript",
                "filename": "setup.sh",
                "merge_type": null
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"setup.sh\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n#!/bin/env bash\n\nARCH=\"amd64\"\nif [ \"$(uname -m)\" = \"aarch64\" ]; then ARCH=arm64; fi\n\n### general dependencies ###\nsudo apt-get update\nsudo apt-get -qq install -y zip net-tools\n\n### install kubectl ###\ncurl https://dl.k8s.io/release/v1.26.3/bin/linux/$ARCH/kubectl -Lo ./kubectl\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin/kubectl\n\n### install kind ###\ncurl https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-$ARCH -Lo ./kind\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n\n### install helm ###\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh  --version v3.12.0\nrm get_helm.sh\n\n### install docker ###\nsudo apt -qq install -y ca-certificates curl gnupg\n\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\necho \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release \u0026\u0026 echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null\n\nsudo apt -qq update\nsudo apt -qq install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin\n\ncat \u003c\u003cEOF | sudo tee /etc/docker/daemon.json \u003e /dev/null\n{\n  \"ipv6\": true,\n  \"fixed-cidr-v6\": \"2001:db8:1::/64\"\n}\nEOF\n\nsudo groupadd docker\nsudo usermod -aG docker ubuntu\n\nsudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n\nsudo mkdir -p /usr/local/lib/docker/cli-plugins\nsudo curl \"https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-$(uname -s)-$(uname -m)\" -Lo /usr/local/lib/docker/cli-plugins/docker-compose\nsudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n\nsudo systemctl restart docker.service\n\n### disable rpcbind/sunrpc (port 111) ###\nsudo systemctl stop rpcbind.service\nsudo systemctl stop rpcbind.socket\nsudo systemctl disable rpcbind.service\n\n### create node data folder ###\nNODE_DATA_PATH=/node-data\nsudo mkdir $NODE_DATA_PATH\nsudo chown -R root:root $NODE_DATA_PATH\nsudo chmod -R 777 $NODE_DATA_PATH\n\n### create cluster ###\nCLUSTER_NAME=kind\nDATA_PATH=$NODE_DATA_PATH/kind-data\nPV_PATH=$NODE_DATA_PATH/kind-pv\n\nexport KUBECONFIG=/.kube/config\n\ncat \u003c\u003cEOF | kind create cluster --wait 5m --config=-\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nname: $CLUSTER_NAME\nnodes:\n- role: control-plane\n  image: kindest/node:v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72\n  kubeadmConfigPatches:\n  - |\n    kind: KubeletConfiguration\n    apiVersion: kubelet.config.k8s.io/v1beta1\n    imageGCHighThresholdPercent: 70\n    imageGCLowThresholdPercent: 0\n    imageMinimumGCAge: 30m\n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    #listenAddress: \"0.0.0.0\"\n  - containerPort: 443\n    hostPort: 443\n    #listenAddress: \"0.0.0.0\"\n  extraMounts:\n  - hostPath: $DATA_PATH\n    containerPath: /mnt\n  - hostPath: $PV_PATH\n    containerPath: /var/local-path-provisioner\nnetworking:\n  ipFamily: dual # ipv4 ipv6 dual\n  apiServerPort: 6443\n  apiServerAddress: \"0.0.0.0\"\nEOF\n\nsudo chown -R root:root /.kube\nsudo chmod -R 777 /.kube\n\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | sudo tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | sudo tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### install istio ###\nexport ISTIO_VERSION=1.21.2\ncurl -L https://istio.io/downloadIstio | sh -\nmv ./istio-$ISTIO_VERSION ./istio\nsudo cp ./istio/bin/* /usr/local/bin\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "cloudinit_config",
      "name": "k8s_with_istio",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "boundary": "MIMEBOUNDARY",
            "gzip": false,
            "id": "716364137",
            "part": [
              {
                "content": "#!/bin/env bash\n\nARCH=\"amd64\"\nif [ \"$(uname -m)\" = \"aarch64\" ]; then ARCH=arm64; fi\n\n### general dependencies ###\nsudo apt-get update\nsudo apt-get -qq install -y net-tools socat conntrack\n\n### enable overlay, br_netfilter kernel modules ###\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/kubernetes.conf\noverlay\nbr_netfilter\nEOF\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n### enable ipv4/ip_forward ###\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/kubernetes.conf\nnet.ipv4.ip_forward = 1\nnet.ipv6.conf.default.forwarding = 1\nEOF\n\nsudo sysctl --system\n\n### install containerd ###\nCONTAINERD_VERSION=\"1.7.18\"\ncurl -L --fail --remote-name-all https://github.com/containerd/containerd/releases/download/v$CONTAINERD_VERSION/containerd-$CONTAINERD_VERSION-linux-$ARCH.tar.gz\nsudo tar Cxzvf /usr/local containerd-$CONTAINERD_VERSION-linux-$ARCH.tar.gz\nsudo rm containerd-$CONTAINERD_VERSION-linux-$ARCH.tar.gz\n\ncurl -sSL \"https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\" | sudo tee /usr/lib/systemd/system/containerd.service\n\nsudo mkdir -p /etc/containerd/\n\ncat \u003c\u003cEOF | sudo tee /etc/containerd/config.toml\nversion = 2\n\n[grpc]\n  address = \"/var/run/containerd/containerd.sock\"\n\n[plugins.\"io.containerd.grpc.v1.cri\"]\n  sandbox_image = \"registry.k8s.io/pause:3.9\"\n\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n  runtime_type = \"io.containerd.runc.v2\"\n\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n  SystemdCgroup = true\nEOF\n\nsudo systemctl enable --now containerd\n\n### install runc ###\nRUNC_VERSION=\"v1.1.12\"\ncurl -L --fail --remote-name-all https://github.com/opencontainers/runc/releases/download/$RUNC_VERSION/runc.$ARCH\nsudo install -m 755 runc.$ARCH /usr/local/sbin/runc\nrm runc.$ARCH\n\n### install CNI plugins ###\nCNI_PLUGINS_VERSION=\"v1.3.0\"\nDEST=\"/opt/cni/bin\"\nsudo mkdir -p \"$DEST\"\ncurl -L \"https://github.com/containernetworking/plugins/releases/download/$CNI_PLUGINS_VERSION/cni-plugins-linux-$ARCH-$CNI_PLUGINS_VERSION.tgz\" | sudo tar -C $DEST -xz\n\n### download cilium CNI ###\nCILIUM_CLI_VERSION=\"v0.16.9\"\nsudo curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/$CILIUM_CLI_VERSION/cilium-linux-$ARCH.tar.gz\nsudo tar xzvfC cilium-linux-$ARCH.tar.gz /usr/local/bin\nsudo rm cilium-linux-$ARCH.tar.gz\n\n### install crictl ###\nCRICTL_VERSION=\"v1.30.0\"\nDOWNLOAD_DIR=\"/usr/local/bin\"\ncurl -L \"https://github.com/kubernetes-sigs/cri-tools/releases/download/$CRICTL_VERSION/crictl-$CRICTL_VERSION-linux-$ARCH.tar.gz\" | sudo tar -C $DOWNLOAD_DIR -xz\n\n### install helm ###\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh  --version v3.14.0\nrm get_helm.sh\n\n### install istio ###\nexport ISTIO_VERSION=1.21.2\ncurl -L https://istio.io/downloadIstio | sh -\nmv ./istio-$ISTIO_VERSION ./istio\nsudo cp ./istio/bin/* /usr/local/bin\n\n### install kubeadm, kubelet, kubectl ###\nKUBERNETES_RELEASE=\"v1.30.1\"\ncd $DOWNLOAD_DIR\nsudo curl -L --remote-name-all https://dl.k8s.io/release/$KUBERNETES_RELEASE/bin/linux/$ARCH/{kubeadm,kubelet,kubectl}\nsudo chmod +x {kubeadm,kubelet,kubectl}\n\n### setup kubelet service ###\nRELEASE_VERSION=\"v0.16.9\"\nsudo mkdir -p /usr/lib/systemd/system/kubelet.service.d\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/$RELEASE_VERSION/cmd/krel/templates/latest/kubelet/kubelet.service\" | sed \"s:/usr/bin:$DOWNLOAD_DIR:g\" | sudo tee /usr/lib/systemd/system/kubelet.service\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/$RELEASE_VERSION/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:$DOWNLOAD_DIR:g\" | sudo tee /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf\n\nsudo systemctl enable --now kubelet\n\n### setup kubernetes control plane ###\ncat \u003c\u003cEOF | sudo tee /kubeadm-config.yaml\n---\napiVersion: kubeadm.k8s.io/v1beta3\nkind: ClusterConfiguration\nnetworking:\n  serviceSubnet: 100.68.0.0/16\n  podSubnet: 100.64.0.0/14\n---\napiVersion: kubeadm.k8s.io/v1beta3\nkind: InitConfiguration\nlocalAPIEndpoint:\n  bindPort: 6443\nEOF\n\nsudo kubeadm init --config=/kubeadm-config.yaml | sudo tee /kubeadm-init.log\n\nexport KUBECONFIG=/.kube/config\n\nsudo mkdir -p /.kube\nsudo cp /etc/kubernetes/admin.conf $KUBECONFIG\n\nsudo chown -R root:root /.kube\nsudo chmod -R 777 /.kube\n\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | sudo tee -a /root/.bashrc \u003e /dev/null\n\n# change for all required users\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | sudo tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### untaint control plane scheduler eviction ###\nkubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-\n\n### setup calico CNI ###\nkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\n\n",
                "content_type": "text/x-shellscript",
                "filename": "setup.sh",
                "merge_type": null
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"setup.sh\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n#!/bin/env bash\n\nARCH=\"amd64\"\nif [ \"$(uname -m)\" = \"aarch64\" ]; then ARCH=arm64; fi\n\n### general dependencies ###\nsudo apt-get update\nsudo apt-get -qq install -y net-tools socat conntrack\n\n### enable overlay, br_netfilter kernel modules ###\ncat \u003c\u003cEOF | sudo tee /etc/modules-load.d/kubernetes.conf\noverlay\nbr_netfilter\nEOF\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n### enable ipv4/ip_forward ###\ncat \u003c\u003cEOF | sudo tee /etc/sysctl.d/kubernetes.conf\nnet.ipv4.ip_forward = 1\nnet.ipv6.conf.default.forwarding = 1\nEOF\n\nsudo sysctl --system\n\n### install containerd ###\nCONTAINERD_VERSION=\"1.7.18\"\ncurl -L --fail --remote-name-all https://github.com/containerd/containerd/releases/download/v$CONTAINERD_VERSION/containerd-$CONTAINERD_VERSION-linux-$ARCH.tar.gz\nsudo tar Cxzvf /usr/local containerd-$CONTAINERD_VERSION-linux-$ARCH.tar.gz\nsudo rm containerd-$CONTAINERD_VERSION-linux-$ARCH.tar.gz\n\ncurl -sSL \"https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\" | sudo tee /usr/lib/systemd/system/containerd.service\n\nsudo mkdir -p /etc/containerd/\n\ncat \u003c\u003cEOF | sudo tee /etc/containerd/config.toml\nversion = 2\n\n[grpc]\n  address = \"/var/run/containerd/containerd.sock\"\n\n[plugins.\"io.containerd.grpc.v1.cri\"]\n  sandbox_image = \"registry.k8s.io/pause:3.9\"\n\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n  runtime_type = \"io.containerd.runc.v2\"\n\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n  SystemdCgroup = true\nEOF\n\nsudo systemctl enable --now containerd\n\n### install runc ###\nRUNC_VERSION=\"v1.1.12\"\ncurl -L --fail --remote-name-all https://github.com/opencontainers/runc/releases/download/$RUNC_VERSION/runc.$ARCH\nsudo install -m 755 runc.$ARCH /usr/local/sbin/runc\nrm runc.$ARCH\n\n### install CNI plugins ###\nCNI_PLUGINS_VERSION=\"v1.3.0\"\nDEST=\"/opt/cni/bin\"\nsudo mkdir -p \"$DEST\"\ncurl -L \"https://github.com/containernetworking/plugins/releases/download/$CNI_PLUGINS_VERSION/cni-plugins-linux-$ARCH-$CNI_PLUGINS_VERSION.tgz\" | sudo tar -C $DEST -xz\n\n### download cilium CNI ###\nCILIUM_CLI_VERSION=\"v0.16.9\"\nsudo curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/$CILIUM_CLI_VERSION/cilium-linux-$ARCH.tar.gz\nsudo tar xzvfC cilium-linux-$ARCH.tar.gz /usr/local/bin\nsudo rm cilium-linux-$ARCH.tar.gz\n\n### install crictl ###\nCRICTL_VERSION=\"v1.30.0\"\nDOWNLOAD_DIR=\"/usr/local/bin\"\ncurl -L \"https://github.com/kubernetes-sigs/cri-tools/releases/download/$CRICTL_VERSION/crictl-$CRICTL_VERSION-linux-$ARCH.tar.gz\" | sudo tar -C $DOWNLOAD_DIR -xz\n\n### install helm ###\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh  --version v3.14.0\nrm get_helm.sh\n\n### install istio ###\nexport ISTIO_VERSION=1.21.2\ncurl -L https://istio.io/downloadIstio | sh -\nmv ./istio-$ISTIO_VERSION ./istio\nsudo cp ./istio/bin/* /usr/local/bin\n\n### install kubeadm, kubelet, kubectl ###\nKUBERNETES_RELEASE=\"v1.30.1\"\ncd $DOWNLOAD_DIR\nsudo curl -L --remote-name-all https://dl.k8s.io/release/$KUBERNETES_RELEASE/bin/linux/$ARCH/{kubeadm,kubelet,kubectl}\nsudo chmod +x {kubeadm,kubelet,kubectl}\n\n### setup kubelet service ###\nRELEASE_VERSION=\"v0.16.9\"\nsudo mkdir -p /usr/lib/systemd/system/kubelet.service.d\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/$RELEASE_VERSION/cmd/krel/templates/latest/kubelet/kubelet.service\" | sed \"s:/usr/bin:$DOWNLOAD_DIR:g\" | sudo tee /usr/lib/systemd/system/kubelet.service\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/$RELEASE_VERSION/cmd/krel/templates/latest/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:$DOWNLOAD_DIR:g\" | sudo tee /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf\n\nsudo systemctl enable --now kubelet\n\n### setup kubernetes control plane ###\ncat \u003c\u003cEOF | sudo tee /kubeadm-config.yaml\n---\napiVersion: kubeadm.k8s.io/v1beta3\nkind: ClusterConfiguration\nnetworking:\n  serviceSubnet: 100.68.0.0/16\n  podSubnet: 100.64.0.0/14\n---\napiVersion: kubeadm.k8s.io/v1beta3\nkind: InitConfiguration\nlocalAPIEndpoint:\n  bindPort: 6443\nEOF\n\nsudo kubeadm init --config=/kubeadm-config.yaml | sudo tee /kubeadm-init.log\n\nexport KUBECONFIG=/.kube/config\n\nsudo mkdir -p /.kube\nsudo cp /etc/kubernetes/admin.conf $KUBECONFIG\n\nsudo chown -R root:root /.kube\nsudo chmod -R 777 /.kube\n\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | sudo tee -a /root/.bashrc \u003e /dev/null\n\n# change for all required users\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | sudo tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### untaint control plane scheduler eviction ###\nkubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-\n\n### setup calico CNI ###\nkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\n\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "cloudinit_config",
      "name": "rke2_calico",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "boundary": "MIMEBOUNDARY",
            "gzip": false,
            "id": "1919206671",
            "part": [
              {
                "content": "#!/bin/env bash\n\n### general dependencies ###\napt-get update\napt-get -qq install -y zip net-tools\n\n### install Kubernetes using RKE2 ###\nmkdir -p /etc/rancher/rke2\ncat \u003c\u003c EOF \u003e  /etc/rancher/rke2/config.yaml\ncni:\n  - calico\ndisable:\n  - rke2-canal\nEOF\n\ncurl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=v1.31.4+rke2r1 sh -\nsystemctl enable rke2-server.service\nsystemctl start rke2-server.service\n\n### setup $KUBECONFIG environment variable ###\nexport KUBECONFIG=/.kube/config\n\nmkdir -p /.kube\n\nchown -R root:root /.kube\nchmod -R 777 /.kube\n\nln -s /etc/rancher/rke2/rke2.yaml /.kube/config\n\n# change for all required users\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### update $PATH ###\nexport PATH=$PATH:/var/lib/rancher/rke2/bin/\necho -e \"\\nexport PATH=$PATH\" | tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport PATH=$PATH\" | tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### install statexec ###\ncurl -L \"https://github.com/blackswifthosting/statexec/releases/download/0.8.0/statexec-linux-amd64\" -o /usr/local/bin/statexec\nchmod +x /usr/local/bin/statexec\n\n### install eztunnel ###\ncurl -L \"https://github.com/arthursimas1/eztunnel/releases/download/v0.1.1/eztunnel-linux-x86_64\" -o /usr/local/bin/eztunnel\nchmod +x /usr/local/bin/eztunnel\n\n### clone arthursimas1/eztunnel ###\ngit clone https://github.com/arthursimas1/eztunnel.git /root/eztunnel\n\n",
                "content_type": "text/x-shellscript",
                "filename": "setup.sh",
                "merge_type": null
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"setup.sh\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n#!/bin/env bash\n\n### general dependencies ###\napt-get update\napt-get -qq install -y zip net-tools\n\n### install Kubernetes using RKE2 ###\nmkdir -p /etc/rancher/rke2\ncat \u003c\u003c EOF \u003e  /etc/rancher/rke2/config.yaml\ncni:\n  - calico\ndisable:\n  - rke2-canal\nEOF\n\ncurl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=v1.31.4+rke2r1 sh -\nsystemctl enable rke2-server.service\nsystemctl start rke2-server.service\n\n### setup $KUBECONFIG environment variable ###\nexport KUBECONFIG=/.kube/config\n\nmkdir -p /.kube\n\nchown -R root:root /.kube\nchmod -R 777 /.kube\n\nln -s /etc/rancher/rke2/rke2.yaml /.kube/config\n\n# change for all required users\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### update $PATH ###\nexport PATH=$PATH:/var/lib/rancher/rke2/bin/\necho -e \"\\nexport PATH=$PATH\" | tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport PATH=$PATH\" | tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### install statexec ###\ncurl -L \"https://github.com/blackswifthosting/statexec/releases/download/0.8.0/statexec-linux-amd64\" -o /usr/local/bin/statexec\nchmod +x /usr/local/bin/statexec\n\n### install eztunnel ###\ncurl -L \"https://github.com/arthursimas1/eztunnel/releases/download/v0.1.1/eztunnel-linux-x86_64\" -o /usr/local/bin/eztunnel\nchmod +x /usr/local/bin/eztunnel\n\n### clone arthursimas1/eztunnel ###\ngit clone https://github.com/arthursimas1/eztunnel.git /root/eztunnel\n\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "cloudinit_config",
      "name": "rke2_cilium",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "boundary": "MIMEBOUNDARY",
            "gzip": false,
            "id": "3214637599",
            "part": [
              {
                "content": "#!/bin/env bash\n\n### general dependencies ###\napt-get update\napt-get -qq install -y zip net-tools\n\n### install Kubernetes using RKE2 ###\nmkdir -p /etc/rancher/rke2\ncat \u003c\u003c EOF \u003e  /etc/rancher/rke2/config.yaml\ncni:\n  - cilium\ndisable:\n  - rke2-canal\nEOF\n\ncurl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=v1.31.4+rke2r1 sh -\nsystemctl enable rke2-server.service\nsystemctl start rke2-server.service\n\n### setup $KUBECONFIG environment variable ###\nexport KUBECONFIG=/.kube/config\n\nmkdir -p /.kube\n\nchown -R root:root /.kube\nchmod -R 777 /.kube\n\nln -s /etc/rancher/rke2/rke2.yaml /.kube/config\n\n# change for all required users\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### update $PATH ###\nexport PATH=$PATH:/var/lib/rancher/rke2/bin/\necho -e \"\\nexport PATH=$PATH\" | tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport PATH=$PATH\" | tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### install statexec ###\ncurl -L \"https://github.com/blackswifthosting/statexec/releases/download/0.8.0/statexec-linux-amd64\" -o /usr/local/bin/statexec\nchmod +x /usr/local/bin/statexec\n\n### install eztunnel ###\ncurl -L \"https://github.com/arthursimas1/eztunnel/releases/download/v0.1.1/eztunnel-linux-x86_64\" -o /usr/local/bin/eztunnel\nchmod +x /usr/local/bin/eztunnel\n\n### clone arthursimas1/eztunnel ###\ngit clone https://github.com/arthursimas1/eztunnel.git /root/eztunnel\n\n",
                "content_type": "text/x-shellscript",
                "filename": "setup.sh",
                "merge_type": null
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Disposition: attachment; filename=\"setup.sh\"\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/x-shellscript\r\nMime-Version: 1.0\r\n\r\n#!/bin/env bash\n\n### general dependencies ###\napt-get update\napt-get -qq install -y zip net-tools\n\n### install Kubernetes using RKE2 ###\nmkdir -p /etc/rancher/rke2\ncat \u003c\u003c EOF \u003e  /etc/rancher/rke2/config.yaml\ncni:\n  - cilium\ndisable:\n  - rke2-canal\nEOF\n\ncurl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=v1.31.4+rke2r1 sh -\nsystemctl enable rke2-server.service\nsystemctl start rke2-server.service\n\n### setup $KUBECONFIG environment variable ###\nexport KUBECONFIG=/.kube/config\n\nmkdir -p /.kube\n\nchown -R root:root /.kube\nchmod -R 777 /.kube\n\nln -s /etc/rancher/rke2/rke2.yaml /.kube/config\n\n# change for all required users\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport KUBECONFIG=/.kube/config\" | tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### update $PATH ###\nexport PATH=$PATH:/var/lib/rancher/rke2/bin/\necho -e \"\\nexport PATH=$PATH\" | tee -a /root/.bashrc \u003e /dev/null\necho -e \"\\nexport PATH=$PATH\" | tee -a /home/ubuntu/.bashrc \u003e /dev/null\n\n### install statexec ###\ncurl -L \"https://github.com/blackswifthosting/statexec/releases/download/0.8.0/statexec-linux-amd64\" -o /usr/local/bin/statexec\nchmod +x /usr/local/bin/statexec\n\n### install eztunnel ###\ncurl -L \"https://github.com/arthursimas1/eztunnel/releases/download/v0.1.1/eztunnel-linux-x86_64\" -o /usr/local/bin/eztunnel\nchmod +x /usr/local/bin/eztunnel\n\n### clone arthursimas1/eztunnel ###\ngit clone https://github.com/arthursimas1/eztunnel.git /root/eztunnel\n\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "lxd_profile",
      "name": "private_net",
      "provider": "provider[\"registry.terraform.io/terraform-lxd/lxd\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "config": {},
            "description": "",
            "device": [
              {
                "name": "eth0",
                "properties": {
                  "nictype": "bridged",
                  "parent": "lxdbr0"
                },
                "type": "nic"
              }
            ],
            "name": "private_net",
            "project": null,
            "remote": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "lxd_storage_pool",
      "name": "dir_pool_default",
      "provider": "provider[\"registry.terraform.io/terraform-lxd/lxd\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "config": {},
            "description": "",
            "driver": "dir",
            "name": "dir_pool_default",
            "project": null,
            "remote": null,
            "source": null,
            "target": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}
